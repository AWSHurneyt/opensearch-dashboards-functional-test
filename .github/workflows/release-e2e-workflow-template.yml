name: Release tests workflow in Bundled OpenSearch Dashboards
on:
  workflow_call:
    inputs:
      test-name:
        required: true
        type: string
      test-command:
        required: true
        type: string
      version:
        required: true
        type: string
env:
  VERSION: ${{ inputs.version }}
jobs:
  tests:
    name: Run Cypress E2E tests for ${{ inputs.test-name }}
    runs-on: ubuntu-latest
    container: 
      image: opensearchstaging/ci-runner:ci-runner-rockylinux8-opensearch-dashboards-integtest-v1
      # options: --user root
    env:
      # prevents extra Cypress installation progress messages
      CI: 1
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm
    steps:
      # - name: Get and run OpenSearch
      #   run: |
      #     echo 'user is '$USER
      #     curl -SLO https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/${{ env.VERSION }}/latest/linux/x64/dist/opensearch/opensearch-${{ env.VERSION }}-linux-x64.tar.gz
      #     tar -xzf opensearch-${{ env.VERSION }}-linux-x64.tar.gz
      #     cd opensearch-${{ env.VERSION }}/
      #     echo 'update user'
      #     echo 'user is '$USER
      #     whoami
      #     su - opensearch -s /bin/sh
      #     whoami
      #     echo 'user is '$USER
      #     ./opensearch-tar-install.sh &
      #     timeout 100 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' -u admin:admin -k https://localhost:9200)" != "200" ]]; do sleep 5; done'
      # - name: Get OpenSearch-Dashboards
      #   run: |
      #     curl -SLO https://ci.opensearch.org/ci/dbc/distribution-build-opensearch-dashboards/${{ env.VERSION }}/latest/linux/x64/dist/opensearch-dashboards/opensearch-dashboards-${{ env.VERSION }}-linux-x64.tar.gz
      #     tar -xzf opensearch-dashboards-${{ env.VERSION }}-linux-x64.tar.gz
      # - name: Run OpenSearch-Dashboards server
      #   run: |
      #     cd opensearch-dashboards-${{ env.VERSION }}
      #     echo $USER
      #     su - opensearch
      #     echo $USER

      #     bin/opensearch-dashboards serve &
      #     timeout 100 bash -c 'while [[ "$(curl -s localhost:5601/api/status | jq -r '.status.overall.state')" != "green" ]]; do sleep 5; done'
      - name: Checkout cypress-test
        uses: actions/checkout@v2
        with:
          repository: ${{github.repository}}
          path: cypress-test
      - name: Cypress tests
        uses: cypress-io/github-action@v2
        with:
          working-directory: cypress-test
          command: ${{ inputs.test-command }}
          wait-on: 'http://localhost:5601'
      # Screenshots are only captured on failure, will change this once we do visual regression tests
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress-test/cypress/screenshots
      # Test run video was always captured, so this action uses "always()" condition
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: cypress-videos
          path: cypress-test/cypress/videos
      # Test reports was always captured, so this action uses "always()" condition
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: cypress-results
          path: cypress-test/cypress/results